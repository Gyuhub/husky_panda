@PACKAGE_INIT@

if(h5pp_FOUND)
    return()
endif()

# Make sure we use h5pp find modules
list(INSERT CMAKE_MODULE_PATH 0 "${CMAKE_CURRENT_LIST_DIR}")
include(CMakeFindDependencyMacro)


##################################################################
### Preempt Threads::Threads                                   ###
### It's looked for in dependencies, so we make it right       ###
### before it's done wrong, i.e. with pthread instead of       ###
### -lpthread.                                                 ###
### Otherwise, we get linker errors consuming h5pp             ###
### Here we specify the linking twice                          ###
### 1) As string to make sure -lpthread gets sandwiched by     ###
###    -Wl,--whole-archive.... -Wl,--no-whole-archive          ###
### 2) As usual to make sure that if somebody links            ###
###    Threads::Threads, then any repeated pthread appended    ###
###    to the end (the wrong order causes linking errors)      ###
##################################################################
if(NOT TARGET Threads::Threads)
    set(THREADS_PREFER_PTHREAD_FLAG TRUE)
    find_package(Threads)
endif()


include(${CMAKE_CURRENT_LIST_DIR}/h5ppTargets.cmake)
get_target_property(H5PP_PACKAGE_MANAGER h5pp::deps INTERFACE_COMPILE_DEFINITIONS)
get_target_property(H5PP_ENABLED_TARGETS h5pp::deps INTERFACE_LINK_LIBRARIES)

include(${CMAKE_CURRENT_LIST_DIR}/h5ppDeps.cmake)

check_required_components(h5pp)